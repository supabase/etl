use actix_web::{
    Error,
    body::MessageBody,
    dev::{ServiceRequest, ServiceResponse},
};
use tracing::Span;
use tracing_actix_web::{DefaultRootSpanBuilder, RootSpanBuilder};

/// The `RootSpanBuilder` implementation for the API service.
/// It extracts the project ref from the `tenant_id` header
/// and sets it as a field in the root span. If the header is not
/// present, it sets the field to `Empty` to allow handlers
/// to set it later.
pub struct ApiRootSpanBuilder;

impl RootSpanBuilder for ApiRootSpanBuilder {
    fn on_request_start(request: &ServiceRequest) -> Span {
        let project = request.headers().get("tenant_id");
        match project {
            Some(project) => {
                // We convert lossily to a string to be able to read at least part of the
                // project ref in case of invalid UTF-8. This is useful for debugging.
                // This is anyways an extreme edge case, as the project ref is
                // generated by the system and should be valid UTF-8.
                let project = String::from_utf8_lossy(project.as_bytes());
                let project = project.as_ref();
                tracing_actix_web::root_span!(request, project = project)
            }
            None => tracing_actix_web::root_span!(request, project = tracing::field::Empty),
        }
    }

    fn on_request_end<B: MessageBody>(span: Span, outcome: &Result<ServiceResponse<B>, Error>) {
        DefaultRootSpanBuilder::on_request_end(span, outcome);
    }
}
