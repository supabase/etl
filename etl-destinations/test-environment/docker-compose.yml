version: '3.8'

services:
  # PostgreSQL source database
  postgres:
    image: postgres:16-alpine
    container_name: etl-postgres
    environment:
      POSTGRES_USER: etl_user
      POSTGRES_PASSWORD: etl_password
      POSTGRES_DB: etl_source
      POSTGRES_REPLICATION_MODE: logical
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: repl_password
    command: >
      postgres
      -c wal_level=logical
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c track_commit_timestamp=on
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U etl_user -d etl_source"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: etl-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_DOMAIN: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Create MinIO bucket
  minio-setup:
    image: minio/mc:latest
    container_name: etl-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin &&
      mc mb myminio/iceberg-warehouse --ignore-existing &&
      mc anonymous set public myminio/iceberg-warehouse
      "

  # Apache Iceberg REST Catalog
  iceberg-rest:
    image: tabulario/iceberg-rest:0.10.0
    container_name: etl-iceberg-rest
    depends_on:
      postgres:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
    environment:
      # Catalog backend configuration
      CATALOG_CATALOG__IMPL: org.apache.iceberg.jdbc.JdbcCatalog
      CATALOG_URI: jdbc:postgresql://postgres:5432/etl_source?user=etl_user&password=etl_password
      CATALOG_JDBC_USER: etl_user
      CATALOG_JDBC_PASSWORD: etl_password
      CATALOG_WAREHOUSE: s3://iceberg-warehouse/
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      CATALOG_S3_ENDPOINT: http://minio:9000
      CATALOG_S3_ACCESS__KEY__ID: minioadmin
      CATALOG_S3_SECRET__ACCESS__KEY: minioadmin
      CATALOG_S3_PATH__STYLE__ACCESS: true
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_REGION: us-east-1
    ports:
      - "8181:8181"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/v1/config"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Optional: Trino for querying Iceberg tables
  trino:
    image: trinodb/trino:435
    container_name: etl-trino
    depends_on:
      iceberg-rest:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - ./trino-config:/etc/trino
    environment:
      TRINO_ENVIRONMENT: docker

volumes:
  postgres_data:
  minio_data:

networks:
  default:
    name: etl-network